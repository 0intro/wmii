.TH WMIIWM 1 wmii-3
.SH NAME
wmiiwm \- window manager improved 2 (core)
.SH SYNOPSIS
.B wmiiwm
.RB \-a
.IR <address>
.RB [ \-c ]
.RB [ \-v ]
.SH DESCRIPTION
.SS Overview
.BR wmiiwm (1)
is the core of the window manager improved 2.
.P
.BR wmii
is a dynamic window manager for X11. In contrast to static window management
the user rarely has to think about how to organize windows, no matter what he
is doing or how many applications are used at the same time. The window manager
adapts to the current environment and helps the user to fit to his needs,
rather than forcing him to use a preset, fixed layout and trying to
shoehorn all windows and applications into it.
.P
.BR wmii
supports classic and tiled window management with extended keyboard and mouse
control.  The classic window management arranges windows in a floating layer,
whereas windows can be moved and resized freely.  The tiled window management 
is based on columns which split up the screen horizontally. Each column handles
arbitrary windows and arranges them vertically in a non-overlapping way,
whereas windows can be moved and resized between and within columns freely.
.P
.BR wmii
provides a virtual filesystem which represents the internal state pretty much
similiar to the procfs of Unix operating systems.  Modifying this virtual
filesystem results in changing the state of the window manager. The virtual
filesystem service can be accessed through 9P-capable client programs,
like
.BR wmiir (1) .
This allows simple and powerful remote control of the core window manager.
.P
.BR wmii
basically consists of clients, columns, views, and the bar, which are described
in detail in the next section.
.SS Options
.TP
.BI \-a " address"
Lets you specify the address which
.B wmiiwm
uses to listen for connections.  The syntax for
.I address
is taken (along with many other profound ideas) from the Plan 9 operating
system and has the form
.BR unix!/path/to/socket 
for unix socket files, and
.BR tcp!hostname!port
for tcp sockets.
.TP
.B \-c
Checks if another window manager is running. If not it exits with termination code
0.
.TP
.B \-v
Prints version information to stdout, then exits.
.SS Terminology
.TP 2
Display
A running X server instance consisting of input devices and screens.
.TP 2
Screen
A physical or virtual (Xinerama or 
.BR Xnest (1))
screen of an X display. A screen displays a bar window and a view at a time.
.TP 2
Window
A (rectangular) drawable X object which is displayed on a screen, usually an
application window.
.TP 2
Client
An application window surrounded with a frame window, which contains a border
and a title-bar. The title-bar consists of two labels, the tags of a client, and
the client's title.
.TP 2
Floating layer
A screen layer of
.BR wmii
on top of all other layers, where clients are arranged in a floating way.
They can be resized or moved freely.
.TP 2
Managed layer
A screen layer of
.BR wmii
behind the floating layer, where clients are arranged in a non-overlapping
(managed) way.  The window manager keeps track that they not overlap each others.
The managed layer consists of columns.
.TP 2
Tag
Alphanumeric strings which can be assigned to a client. This allows to address
single clients or groups of clients with a single tag, e.g.
.IR work ,
or several tags, e.g.
.IR work+mail.
Tags are separated with the
.I +
character.
.TP 2
View
A set of clients containing a specific tag, quite similiar to a workspace in
other window managers.  It consists of the floating and managed layers.
.TP 2
Column
A column is a screen area which arranges clients vertically in a
non-overlapping way. Columns provide three different modes, which arrange
clients with equal size, stacked, or maximized respectively. Clients can be
moved and resized between and within columns freely.
.TP 2
Bar
The bar at the bottom of the screen displays a label for each view and
allows to create arbitrary user-defined labels.
.TP 2
Event
An event is a message which can be read from a special file in the filesystem
of
.BR wmiiwm
like a mouse button press, a key press, or a message written by a different
9P-client.
.SS Basic window management
Running a raw
.BR wmiiwm
process without the
.BR wmii (1)
script, provides basic window management capabilities already. However to use
it effectively, remote control through its filesystem interface is necessary.
By default it is only usable with the mouse in conjunction with the
.I Mod1 (Alt)
modifier key. Other interactions like customizing the style, killing or
retagging clients, or grabbing keys cannot be achieved without accessing the
filesystem.
.P
The filesystem can be accessed through connecting to the
.I address
of
.BR wmiiwm
with any 9P-capable client, like
.BR wmiir (1).
.SS File system
The
.BR wmiiwm
filesystem is designed with simplicity and clarity in mind. It consists of
logical namespaces which represent its internal state and data structure in a
straight-forward way.
.TP 2
Root directory
.TP
/bar/
This directory contains a representation of each label in the bar.
.TP
/client/
This directory contains a representation of each client.
.TP
/ctl
This file understands the internal commands
.IR quit ,
which quits the window manager, and
.IR view
.IR <tag> ,
which switches to a view for the specific tag.
.TP
/def/
This directory contains a representation of all default options.
.TP
/event
This file reports events. Reading this file is blocking, this means that
a 9P-client will not exit until
.BR wmiiwm
quits, or until the client is terminated explicitely.
.TP
/tags
This file contains a list of newline-separated tags currently in use.
.TP
/view/
This and all other directories contain a representation of each view. The
.I /view/
directory points to the currently selected view.
.TP 2
Bar directory
.TP
/bar/X/colors
This file defines the colors as RGB-tuple of the specific label, described in detail below.
.TP
/bar/X/data
This file contains the text displayed by the label, it may be empty.
.TP 2
Clients directory
.TP
/client/X/class
This file contains the X property
.I WM_CLASS
in the form of
.IR <Class>:<instance> .
.TP
/client/X/ctl
This file understands the internal client-specific commands
.IR kill ,
which kills (closes) the specific client nicely,
.IR sendto
.IR prev
|
.IR next
|
.IR toggle
|
.IR <0..n> ,
which sends the client to the previous, next, or explicitely addressed column, and the
.IR swap
.IR prev
|
.IR next
|
.IR up
|
.IR down 
command,
which swaps the client with an adjacent client in the specific direction.
.TP
/client/X/geom
This file contains the current geometry of the client's frame and can be used to resize
the client, described in detail below.
.TP
/client/X/index
This file contains the index of the client in the
.I /client/
namespace.
.TP
/client/X/name
This file contains the name of the client read by the X property
.I WM_NAME .
.TP
/client/X/tags
This file contains the tags of the client.
.TP 2
Defaults directory
.TP
/def/border
This file defines the default border width for all clients in
.IR <0..n>
pixels.
.TP
/def/colmode
This file defines the default column mode of newly created columns, described in detail below.
.TP
/def/colwidth
This file defines the default width of newly created columns, described in detail below.
.TP
/def/font
This file defines the font which should be used by its name, like that ones grabbed with the
.BR xfontsel (1)
utility for X.
.TP
/def/grabmod
This file defines the default modifier for mouse-grabs, described in detail below.
.TP
/def/keys
This file contains a newline-separated list of all shortcuts which should be grabbed by
.BR wmiiwm
and which are reported as events.
.TP
/def/normcolors
This file defines the colors of unselected clients and bar labels,
described in detail below.
.TP
/def/rules
This file defines the rules for applying default tags to all existing and newly created clients,
described in detail below.
.TP
/def/selcolors
This file defines the colors of selected clients and bar labels,
described in detail below.
.TP 2
View directory
.TP
/view/X/
This directory contains a representation of a column or the floating layer.
The
.I /view/sel/
directory points to the currently selected column or floating layer.
.TP
/view/ctl
This file understands the internal view-specific command
.IR select
.IR <0..n> ,
which selects the specific area, 0 means floating layer, all other numeric
values address the specific column from left to right.
.TP
/view/name
This file contains the view's name which corresponds to the currently viewed
clients containing the equivalent tag.
.TP 2
Column and floating layer directory
.TP
/view/X/Y/
This directory contains a representation of a client of this column or floating
layer respectively. Its contents are the same as in the
.I /client/X/
namespace described above.
.TP
/view/X/ctl
This file understands the internal column-specific command
.IR select
.IR <0..n> ,
which selects the specific client from top to bottom.
.TP
/view/X/mode
This file defines the column mode of this column, described in detail below.
Note, floating layer directories do not contain this file.
.SS Syntax of files
All files of the filesystem described above can be read, most of them can be
written as well. Most of the only can be written using valid syntax.
.TP 2
colors, selcolors, normcolors
Each of these files expects three blank-separated color values of the form
.IR #RRGGBB
.IR #RRGGBB
.IR #RRGGBB .
The order defines foreground, background, and border colors respectively.
.TP 2
geom
Each of this file expects four blank-separated alphanumeric values which define the
client's geometry in the order
.IR <x>
.IR <y>
.IR <width>
.IR <height> .
Each value for itself can be absolute like
.I <0..n> ,
or an alignment value such as
.IR north ,
.IR west ,
.IR south ,
.IR east ,
or
.IR center .
The alignment values address the specific screen border or center respectively.
Thus they provide a resolution-independent way to address specific coordinates.
Absolute values can be prepended with the
.I +
or
.I -
operators, which makes them relative, e.g.
.I -40 .
Alignment values can be appended with a relative value to address special positions, e.g.
.I south-16 .
.TP 2
colmode, mode
Each of this file expects a single value of the form
.IR default ,
.IR stack ,
or
.IR max ,
defining the default, stacking, or maximized mode for columns respectively.
.TP 2
grabmod
This file expects a single value of the form
.IR Mod1 ,
.IR Mod2 ,
.IR Mod3 ,
.IR Mod4 ,
or
.IR Mod5 .
The specific value corelates with the specific modifier key defined in X, usually
.IR Mod1
is the
.IR Alt
key on most keyboard layouts.
.TP 2
keys
This file expects a newline-separated list of shortcuts of the form
.BI [<modifier>\-]<key> .
As modifier a value of the form
.IR Mod1 ,
.IR Mod2 ,
.IR Mod3 ,
.IR Mod4 ,
.IR Mod5 ,
.IR Control ,
.IR Shift ,
or
.IR Mod1\-Control\-Shift 
are valid. You can combine one
.IR Modn
value with either
.IR Control 
or 
.IR Shift
or none. Also no modifier at all is valid syntax.
The key value must correlate to the key symbol reported by the
.BR xev (1)
utility.
.TP 2
rules
This file expects a newline-separated list of rules of the form
.BI /regexp/
.BI \->
.BI <tag> .
See the
.BR wmiirc
script for examples.
The rules are matched against the
.I class
and 
.I name
file contents of a client whenever written. If the rule file is empty,
.BR wmiiwm
by default assigns the
.IR nil
tag to each client, thus there is also only a nil-view with an empty rule file.
Clients who contain a tag already, except the
.IR nil
tag, are not matched. Rules are applied from top to bottom of these file
contents, thus order matters. The special
.IR ~
tag has to be assigned in a separate rule, and which is matched always.
It makes a matching client floating at creation or retag-time.
The special
.IR !
tag inherits the currently viewed tag, if no tag has been matched so far,
and should be defined before the last rule always.
The last rule should define the default tag which overrides the
.IR nil
tag, if a different default is wished, e.g.
.IR 1 .
Usually the last rule tag, if a different default is wished, e.g.
.IR 1 .
Usually the last rule should be
.BI /.*/
.BI ->
.BI <default\-tag> .
The syntax for the regular expression must be POSIX compliant.
.SH SEE ALSO
.BR wmii (1),
.BR wmiimenu (1),
.BR wmiir (1)
